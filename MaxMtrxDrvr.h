/*
  MaxMatrixDriver.h - Library for displaying ASCII led matrices driven by MAX7221
  Created by Minh Tran, March 14, 2014.
  For private use and with creator's permission.

  Status:
  - Code scales with matrix dimensions and number of chips used      (Unimplemented)
  - Scrolling Text (Up,Down,Left, Right)                             (Unimplemented)

  -writeCol needs to be rewritten
*/
#ifndef MaxMtrxDrvr_h
#define MaxMtrxDrvr_h

#define max7221_reg_noop         0x00
#define max7221_reg_digit0       0x01
#define max7221_reg_digit1       0x02
#define max7221_reg_digit2       0x03
#define max7221_reg_digit3       0x04
#define max7221_reg_digit4       0x05
#define max7221_reg_digit5       0x06
#define max7221_reg_digit6       0x07
#define max7221_reg_digit7       0x08
#define max7221_reg_decodeMode   0x09
#define max7221_reg_intensity    0x0a
#define max7221_reg_scanLimit    0x0b
#define max7221_reg_shutdown     0x0c
#define max7221_reg_displayTest  0x0f
#include "Arduino.h"

//(Sprite mapping)Top-Down/Small-Large Addr; (width, height) prefixes 8-byte
// Equivalence classes: i = width, i+1 = height, i+(2-9) = Byte encoding of sprite
// ASCII 65=A
const byte chTbl[] PROGMEM = {
  2, 8, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //32 ' ' Space
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //33 '!'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //34 '"' Quote
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //35 '#' Hash tag
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //36 '$'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //37 '%'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //38 '&'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //39 '''
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //40 '('
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //41 ')'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //42 '*'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //43 '+'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //44 ','
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //45 '-'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //46 '.'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //47 '/'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //48 '0'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //49 '1'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //50 '2'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //51 '3'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //52 '4'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //53 '5'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //54 '6'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //55 '7'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //56 '8'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //57 '9'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //58 ':'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //59 ';'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //60 '<'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //61 '='
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //62 '>'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //63 '?'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //64 '@'
  4, 6, B00000000, B00000000, B01100000, B10010000, B10010000, B11110000, B10010000, B10010000, //65 'A'
  4, 7, B00000000, B11100000, B10010000, B10010000, B11100000, B10010000, B10010000, B11100000, //66 'B'
  4, 7, B00000000, B01100000, B10010000, B10000000, B10000000, B10000000, B10010000, B01100000, //67 'C'
  4, 7, B00000000, B11000000, B10100000, B10010000, B10010000, B10010000, B10100000, B11000000, //68 'D'
  4, 6, B00000000, B00000000, B11110000, B10000000, B11100000, B10000000, B10000000, B11110000, //69 'E'
  4, 7, B00000000, B11110000, B10000000, B10000000, B11100000, B10000000, B10000000, B10000000, //70 'F'
  5, 7, B00000000, B01100000, B10010000, B10000000, B10111000, B10010000, B10010000, B01100000, //71 'G'
  4, 7, B00000000, B10010000, B10010000, B10010000, B11110000, B10010000, B10010000, B10010000, //72 'H'
  3, 6, B00000000, B00000000, B11100000, B01000000, B01000000, B01000000, B01000000, B11100000, //73 'I'
  5, 7, B00000000, B01111000, B00010000, B00010000, B00010000, B00010000, B10010000, B01100000, //74 'J'
  4, 7, B00000000, B10010000, B10010000, B10100000, B11000000, B10100000, B10010000, B10010000, //75 'K'
  4, 7, B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11110000, //76 'L'
  5, 7, B00000000, B10001000, B11011000, B10101000, B10101000, B10001000, B10001000, B10001000, //77 'M'
  5, 7, B00000000, B10001000, B11001000, B11001000, B10101000, B10011000, B10011000, B10001000, //78 'N'
  4, 6, B00000000, B00000000, B01100000, B10010000, B10010000, B10010000, B10010000, B01100000, //79 'O'
  4, 7, B00000000, B11100000, B10010000, B10010000, B11100000, B10000000, B10000000, B10000000, //80 'P'
  5, 7, B00000000, B01110000, B10001000, B10001000, B10001000, B10101000, B10010000, B01101000, //81 'Q'
  4, 7, B00000000, B11100000, B10010000, B10010000, B11100000, B10100000, B10010000, B10010000, //82 'R'
  5, 7, B00000000, B01110000, B10001000, B10000000, B01110000, B00001000, B10001000, B01110000, //83 'S'
  5, 7, B00000000, B11111000, B00100000, B00100000, B00100000, B00100000, B00100000, B00100000, //84 'T'
  4, 6, B00000000, B00000000, B10010000, B10010000, B10010000, B10010000, B10010000, B01100000, //85 'U'
  5, 7, B00000000, B10001000, B10001000, B10001000, B10001000, B01010000, B01010000, B00100000, //86 'V'
  5, 7, B00000000, B10001000, B10001000, B10001000, B10101000, B10101000, B11011000, B01010000, //87 'W'
  5, 7, B00000000, B10001000, B10001000, B01010000, B00100000, B01010000, B10001000, B10001000, //88 'X'
  5, 7, B00000000, B10001000, B10001000, B01010000, B00100000, B00100000, B00100000, B00100000, //89 'Y'
  5, 7, B00000000, B11111000, B00011000, B00010000, B00100000, B01000000, B11000000, B11111000, //90 'Z'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //91 '[' Space
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //92 '\'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //93 ']' Quote
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //94 '^' Hash tag
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //95 '_'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //96 '`'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //97 'a'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //98 'b'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //99 'c'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //100 'd'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //101 'e'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //102 'f'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //103 'g'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //104 'h'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //105 'i'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //106 'j'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //107 'k'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //108 'l'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //109 'm'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //110 'n'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //111 'o'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //112 'p'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //113 'q'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //114 'r'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //115 's'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //116 't'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //117 'u'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //118 'v'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //119 'w'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //120 'x'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //121 'y'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //122 'z'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //123 '{'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //124 '|'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //125 '}'
  0, 0, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, //126 '~'
};

class MaxMtrxDrvr
{
   public:
      MaxMtrxDrvr(int SSPin, int clkPin, int dataPin, int numChips);
      char* msg;   //*Input string message to be converted into sprite

      //Initiations
      void setMXDim(int nCol, int nRow); //Sets dimension of dot-matrix you're using e.g. 5x7, 8x8 (Scaling)
      void setStatusPin(int ledPin);
      void init();                       //Assigns pinmodes, sets MAX's initial Control Registers

      //Functions
      void setMsg(char* message);  //*Sets input string to be displayed. Returns the number of columns needed to display entire message on the matrix. Depends on table organization.
      char* getMsg();

      //Debug Functions
      void setLed(int x, int y,int value, int addr);       //Light LED at (x,y); top left = (0,0); x=choose column/Segs, y=choose row/Digits; value=0 (off/on)
      void writeCol(int colNum, byte binCol,int addr);    //*colNum=DP(128),A(64),B,etc...; LSB of binCol = Top, MSB = bottom of LED MX
      void writeRow(int rowNum, byte binRow,int addr);    //Writes to a row a binary encoding
      void writeLet(char asciiLetter, int addr);   //Write letter to LED
      void writeAlphabet();
      void clear(int addr);

   private:
      int ss, clk, dataPin;   //Slave Select pin, clock pin, data pin
      int nMax;               //Number of Max chips (assuming 1 max chip per Matrix display)
      int nRow, nCol;         //Dot-matrix dimensions
      int statusPin;          //LED status pin


      void putBytes(int addr, byte addrByte, byte dataByte);     //Write 2 bytes to MAX chip in SPI protocol, to chip indicated by addr
      int countMsgSize(char msg[]);    //*Counts the number of columns required to generate a buffer for display

      //Debug
      void errLed(int errType); //0=Wink 1=Out of boundary
};

#endif
